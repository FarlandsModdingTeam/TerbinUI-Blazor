@page "/configuracion"
@using System.Reflection.Metadata
@rendermode InteractiveServer

<PageTitle>TerbinUI</PageTitle>

<h2><T Key="16" /></h2>

<div class="m-1 w-100">
    <p><T Key="17" />:</p>
    <div class="row">
        <input class="col-9" id="dirFarlands" type="text" />
        <button class="col-1 btn btn-outline-primary me-2">*Examinar</button>
        <button class="col-1 btn btn-outline-primary">*Abrir</button>
    </div>
</div>

<hr />
<h2><T Key="15" /></h2>

<div class="m-1">
    <p><T Key="18" />:</p>
    <div class="w-100">
        <input class="w-50" id="dirInstnacias" type="text" />
        <button class="btn btn-outline-primary">*Examinar</button>
        <button class="btn btn-outline-primary">*Abrir</button>
    </div>
</div>
<div class="m-1">
    <p><T Key="19" />:</p>
    <div class="w-100">
        <input class="w-50" id="dirMods" type="text" />
        <button class="btn btn-outline-primary">*Examinar</button>
        <button class="btn btn-outline-primary">*Abrir</button>
    </div>
</div>

<select @bind="selecionarIdioma">
    @*selected="@(idioma.Key == ManagaIdioma.CurrentLanguage ? "selected" : null)">*@
    @foreach (var idioma in ManagaIdioma.GetLanguages())
    {
        <option value="@idioma.Key" selected="@(idioma.Key == ManagaIdioma.CurrentLanguage ? "selected" : null)">
            @idioma.Value
        </option>
    }
</select>
<hr />

@code
{
    private int contador = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // printearIdiomas();
    }

    private string selecionarIdioma
    {
        get => ManagaIdioma.CurrentLanguage ?? "Error";
        set
        {
            contador++;
            Console.WriteLine($"Cambiando Idioma ...");
            if (!string.IsNullOrEmpty(value) && value != ManagaIdioma.CurrentLanguage)
            {
                InvokeAsync(() =>
                {
                    ManagaIdioma.CurrentLanguage = value;
                    Console.WriteLine($"Idioma Actual: {value}");
                    StateHasChanged();
                });
            }
        }
    }

    private void printearIdiomas()
    {
        string info = string.Empty;
        ManagaIdioma.GetLanguages()
            .Select(kvp => $"Archivo: {kvp.Key}, Idioma: {kvp.Value}")
            .ToList()
            .ForEach(i => info += "\n" + i);

        Console.WriteLine($"Idiomas Actuales:{info}");
    }

    private void changeIdioma()
    {
        contador++;
        //Console.WriteLine($"Cambiando Idioma ...");
        //
        //ManagaIdioma.CurrentLanguage = selecionarIdioma;
        //Console.WriteLine($"Idioma Actual: {selecionarIdioma}");
        //StateHasChanged();
    }
}